# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- frontend

pool:
  vmImage: ubuntu-latest

variables:
  buildid: $(Build.BuildId)
  target: $(build.artifactstagingdirectory)
  artifact: AM
  tag: '$(Build.BuildId)'
  dockerUsername: 'shashidher'



stages:
  - stage:
    displayName: Building
    jobs:

    - job: 
      displayName: Installing Docker cli
      steps:
      - task: DockerInstaller@0
        inputs:
          dockerVersion: '17.09.0-ce'
          releaseType: stable
      
      
      - task: Docker@2
        inputs:
          containerRegistry: 'Dockerhub'
          command: 'login'
      - task: CmdLine@2
        displayName: docker info
        inputs:
          script: |
            docker info
      - task: Docker@2
        displayName: build and push to docker
        inputs:
          containerRegistry: 'Dockerhub'
          repository: 'shashidher/recommendationservice'
          command: 'buildAndPush'
          Dockerfile: '**/src/recommendationservice/Dockerfile'

      - task: CmdLine@2
        inputs:
          script: |
           sudo apt-get install wget apt-transport-https gnupg lsb-release
           wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
           echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
           sudo apt-get update
           sudo apt-get install trivy
           trivy -v
           pwd
      - task: CmdLine@2
        displayName: RUN AQUASEC TRIVY SCAN AND COPY TO ARTIFACTS STAGING DIRECTORY
        inputs:
          script: |
            trivy image --exit-code 0 --severity LOW,MEDIUM $(dockerUsername)/recommendationservice:$(tag) > low-med.txt
            trivy image --exit-code 1 --severity HIGH,CRITICAL $(dockerUsername)/recommendationservice:$(tag) > high-critical.txt
            ls -l
            cp -rvf *.txt $(target)
      
      - task: PublishBuildArtifacts@1
        displayName: PUBLISH ARTIFACTS
        inputs:
          targetPath: '$(target)'
          artifactName: '$(artifact)'
